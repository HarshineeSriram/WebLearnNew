<?xml version="1.0" encoding="utf-8"?>
<ScrollView android:layout_height="wrap_content"
    android:layout_width="match_parent"
    xmlns:android="http://schemas.android.com/apk/res/android">
    <LinearLayout
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:layout_width="match_parent"
        android:paddingTop="16dp"
        android:paddingRight="16dp"
        android:paddingLeft="16dp"
        >
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textSize="18sp"
            android:paddingBottom="16dp"
            android:text="Let's explain some of the core features of the JavaScript language, to give you greater understanding of how it all works. Better yet, these features are common to all programming languages. If you master these fundamentals, you're on your way to being able to program just about anything!"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textSize="34sp"
            android:paddingBottom="20dp"
            android:text="Variables"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textSize="18sp"
            android:paddingBottom="16dp"
            android:text="Variables are containers that you can store values in. You start by declaring a variable with the var keyword, followed by any name you want to call it:
varmyVariable;
Note: A semi-colon at the end of a line indicates where a statement ends; it is only absolutely required when you need to separate statements on a single line, but some people believe that it is a good practice to put them in at the end of each statement. There are other rules for when you should and shouldn’t use them. Avoid using semicolon
1.	 After a closing curly bracket
2.	After the round bracket of an if, for, while or switch statement

Note: You can name a variable nearly anything, but there are some name restrictions like it cannot start with a numeral, must not contain any punctuation marks and spaces. If you are unsure, you can check your variable name to see if it is valid.
Note: JavaScript is case sensitive — myVariable is a different variable to myvariable. If you are getting problems in your code, check the casing!
After declaring a variable, you can give it a value:
myVariable='Bob';
You can do both these operations on the same line if you wish:
varmyVariable='Bob';
You can retrieve the value by just calling the variable by name:
myVariable;
After giving a variable a value, you can later choose to change it:
varmyVariable = 'Bob';
myVariable = 'Steve';
Note that variables have different data types.

String               A sequence of text known as a string. To signify that the variable is a string,        you should enclose it in quote marks.	varmyVariable = 'Bob';
Number          A number. Numbers don't have quotes around them.	varmyVariable = 10;
Boolean           A True/False value. The words true and false are special keywords in JS, and don't need quotes.	varmyVariable = true;                                                                       Array                 A structure that allows you to store multiple values in one single reference.	varmyVariable = [1,'Bob','Steve',10];
Refer to each member of the array like this:
myVariable[0], myVariable[1], etc.
Object
Basically, anything. Everything in JavaScript is an object, and can be stored in a variable. Keep this in mind as you learn.	varmyVariable = document.querySelector('h1');
All of the above examples too.So why do we need variables? Well, variables are needed to do anything interesting in programming. If values couldn't change, then you couldn't do anything dynamic, like personalize a greeting message or change the image displayed in an image gallery.
"/>
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textSize="34sp"
            android:paddingBottom="20dp"
            android:text="Comments"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textSize="18sp"
            android:paddingBottom="16dp"
            android:text="You can put comments into JavaScript code, just as you can in CSS:
/*
Everything in between is a comment.
*/
If your comment contains no line breaks, it's often easier to put it behind two slashes like this:
// This is a comment
"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textSize="34sp"
            android:paddingBottom="20dp"
            android:text="Operators"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textSize="18sp"
            android:paddingBottom="16dp"
            android:text="An operator is a mathematical symbol which produces a result based on two values (or variables). In the following table you can see some of the simplest operators, along with some examples to try out in the JavaScript console."/>




        <TableLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content">
            <TableRow
                android:layout_height="wrap_content"
                android:layout_width="match_parent"
                android:paddingBottom="10dp"
                >
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="Operator"
                    android:textStyle="bold"
                    android:layout_weight="1"/>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:layout_weight="1"
                    android:textStyle="bold"
                    android:text="Explanation"/>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:layout_weight="1"
                    android:textStyle="bold"
                    android:text="Symbol(s)"/>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:layout_weight="1"
                    android:textStyle="bold"
                    android:text="Example"/>
            </TableRow>
            <TableRow
                android:layout_height="wrap_content"
                android:layout_width="match_parent"
                android:padding="8dp"
                >
                <TextView
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:text="add/concatenation"
                    android:textStyle="bold"
                    android:layout_weight="1"/>
                <TextView
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:layout_weight="1"
                    android:text="Used to add two numbers together, or glue two strings together."/>
                <TextView
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:layout_weight="1"
                    android:gravity="center"
                    android:text="+"/>
                <TextView
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:layout_weight="1"
                    android:text="6 + 9;
&#10;Hello &#10; + &#10;world!&#10;;
                "/>
            </TableRow>
            <TableRow
                android:layout_height="wrap_content"
                android:layout_width="match_parent"
                android:padding="8dp"
                >
                <TextView
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:text="subtract, multiply, divide"
                    android:textStyle="bold"
                    android:layout_weight="1"/>
                <TextView
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:layout_weight="1"
                    android:text="These do what you'd expect them to do in basic math."/>
                <TextView
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:layout_weight="1"
                    android:gravity="center"
                    android:text="-, *, /"/>
                <TextView
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:layout_weight="1"
                    android:text="9 - 3;
8 * 2; // multiply in JS is an asterisk
9 / 3;
 "/>
            </TableRow>
            <TableRow
                android:layout_height="wrap_content"
                android:layout_width="match_parent"
                android:padding="8dp"
                >
                <TextView
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:text="assignment operator"
                    android:textStyle="bold"
                    android:layout_weight="1"/>
                <TextView
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:layout_weight="1"
                    android:text="You've seen this already: it assigns a value to a variable."/>
                <TextView
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:layout_weight="1"
                    android:gravity="center"
                    android:text="="/>
                <TextView
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:layout_weight="1"
                    android:text="varmyVariable = 'Bob';"/>
            </TableRow>
            <TableRow
                android:layout_height="wrap_content"
                android:layout_width="match_parent"
                android:padding="8dp"
                >
                <TextView
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:text="Identity operator"
                    android:textStyle="bold"
                    android:layout_weight="1"/>
                <TextView
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:layout_weight="1"
                    android:text="Does a test to see if two values are equal to one another, and returns a true/false (Boolean) result."/>
                <TextView
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:layout_weight="1"
                    android:gravity="center"
                    android:text="==="/>
                <TextView
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:layout_weight="1"
                    android:text="varmyVariable = 3;
myVariable === 4;
 "/>
            </TableRow>
            <TableRow
                android:layout_height="wrap_content"
                android:layout_width="match_parent"
                android:padding="8dp"
                >
                <TextView
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:text="Negation, not equal"
                    android:textStyle="bold"
                    android:layout_weight="1"/>
                <TextView
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:layout_weight="1"
                    android:text="Returns the logically opposite value of what it precedes; it turns a true into a false, etc. When it is used alongside the Equality operator, the negation operator tests whether two values are not equal."/>
                <TextView
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:layout_weight="1"
                    android:gravity="center"
                    android:text="!, !=="/>
                <TextView
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:layout_weight="1"
                    android:text="The basic expression is true, but the comparison returns false because we've negated it:
varmyVariable = 3;
!(myVariable === 3);
Here we are testing &#10;is myVariable NOT equal to 3&#10;. This returns false because myVariable IS equal to 3.
                varmyVariable = 3;
                myVariable !== 3;
                "/>
            </TableRow>
        </TableLayout>
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textSize="18sp"
            android:paddingBottom="16dp"
            android:text="There are a lot more operators to explore, but this is enough for now.
Note: Mixing data types can lead to some strange results when performing calculations, so be careful that you are referring to your variables correctly, and getting the results you expect. For example, enter &#10;35&#10; + &#10;25&#10; into your console. Why don't you get the result you expected? Because the quote marks turn the numbers into strings, so you've ended up concatenating strings rather than adding numbers. If you enter, 35 + 25 you'll get the correct result.
        "/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textSize="34sp"
            android:paddingBottom="20dp"
            android:text="Conditionals"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textSize="18sp"
            android:paddingBottom="16dp"
            android:text="Conditionals are code structures which allow you to test if an expression returns true or not, running alternative code revealed by its result. The most common form of conditional is called if ... else.  So for example:
variceCream='chocolate';
if(iceCream==='chocolate'){
alert('Yay, I love chocolate ice cream!');
}else{
alert('Awwww, but chocolate is my favorite...');
}
The expression inside the if ( ... ) is the test — this uses the identity operator (as described above) to compare the variable iceCream with the string chocolate to see if the two are equal. If this comparison returns true, the first block of code is run. If the comparison is not true, the first block is skipped and the second code block, after the else statement, is run instead.
"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textSize="34sp"
            android:paddingBottom="20dp"
            android:text="Functions"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textSize="18sp"
            android:paddingBottom="16dp"
            android:text="Functions are a way of packaging functionality that you wish to reuse. When you need the procedure you can call a function, with the function name, instead of rewriting the entire code each time. You have already seen some uses of functions above, for example:
1.	varmyVariable=document.querySelector('h1');
•• alert('hello!');
2.
These functions, document.querySelector and alert, are built into the browser for you to use whenever you desire.
If you see something which looks like a variable name, but has brackets — () — after it, it is likely a function. Functions often take arguments — bits of data they need to do their job. These go inside the brackets, separated by commas if there is more than one argument.
For example, the alert () function makes a pop-up box appear inside the browser window, but we need to give it a string as an argument to tell the function what to write in the pop-up box.
The good news is you can define your own functions — in this next example we write a simple function which takes two numbers as arguments and multiplies them:
functionmultiply(num1,num2){
var result = num1 * num2;
return result;
}
Try running the above function in the console, then test with several arguments. For example:
multiply(4,7);
multiply(20,20);
multiply(0.5,3);
Note: The return statement tells the browser to return the result variable out of the function so it is available to use. This is necessary because variables defined inside functions are only available inside those functions. This is called variable scoping.
"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textSize="34sp"
            android:paddingBottom="20dp"
            android:text="Events"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textSize="18sp"
            android:paddingBottom="16dp"
            android:text="Real interactivity on a website needs events. These are code structures which listen for things happening in browser, running code in response. The most obvious example is the click event, which is fired by the browser when you click on something with your mouse. To demonstrate this, enter the following into your console, then click on the current webpage:
document.querySelector('html').onclick=function(){
alert('Ouch! Stop poking me!');
}
There are many ways to attach an event to an element. Here we select the HTML element, setting its onclick handler property equal to an anonymous (i.e. nameless) function, which contains the code we want the click event to run.
Note that
document.querySelector('html').onclick=function(){};
is equivalent to
varmyHTML=document.querySelector('html');
myHTML.onclick=function(){};
It's just shorter.
"/>

    </LinearLayout>
</ScrollView>